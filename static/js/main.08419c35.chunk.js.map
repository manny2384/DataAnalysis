{"version":3,"sources":["Content.js","serviceWorker.js","index.js"],"names":["url","CreateTable","props","head_elements","my_header","map","header","index","key","row_elements","my_table","row","item","i","Content","state","column_list","sub_table","conservation_status_list","category_list","show_table","reqOptions","method","headers","fetch","then","response","json","data","setState","Array","from","JSON","parse","catch","err","console","log","cat","document","getElementById","value","con","blob","image","src","this","Table","category_options","conservation_options","className","id","onClick","req_sublist","bind","show_entire_table","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qMACIA,EAAM,0CAEV,SAASC,EAAYC,GACjB,IAAIC,EAAgBD,EAAME,UAAUC,KAAK,SAACC,EAAQC,GAC9C,OAAO,wBAAIC,IAAKD,GAASD,MAGzBG,EAAeP,EAAMQ,SAASL,KAAI,SAACM,EAAKJ,GACxC,OAAO,wBAAIC,IAAKD,GAASI,EAAIN,KAAI,SAACO,EAAMC,GACpC,OAAO,wBAAIL,IAAKK,GAAKD,UAG7B,OAAO,oCACP,+BAAO,4BAAKT,IACZ,+BAAQM,I,IA+IGK,E,kDAzIb,WAAYZ,GAAO,IAAD,8BAChB,cAAMA,IACDa,MAAQ,CAACC,YAAc,GAAIN,SAAS,GAAIO,UAAU,KACnDC,yBAAyB,GAAIC,cAAc,GAAIC,YAAW,GAH9C,E,gEAMI,IAAD,OACTC,EAAa,CACfC,OAAO,MACPC,QAAS,CAAE,eAAgB,qBAI/BC,MAAMxB,EAAI,oBAAqBqB,GAAYI,MAAK,SAACC,GAE7C,OAAOA,EAASC,UACjBF,MAAK,SAACG,GAQL,OAPA,EAAKC,UAAS,SAACd,GACX,MAAO,CACHC,YAAaY,EAAK,GAAIT,cAAeS,EAAK,GAC1CV,yBAA0BU,EAAK,OAIhCJ,MAAMxB,EAAI,IAAKqB,MACvBI,MAAK,SAACC,GAEL,OAAOA,EAASC,UACjBF,MAAK,SAACG,GAEL,EAAKC,UAAS,WACV,MAAO,CAACnB,SAAUoB,MAAMC,KAAKC,KAAKC,MAAML,WAG/CM,OAAM,SAAAC,GACHC,QAAQC,IAAI,8C,oCAKN,IAAD,OAGLC,EAAwD,KAAlDC,SAASC,eAAe,gBAAgBC,MAAeF,SAASC,eAAe,gBAAgBC,MAAQ,OAC7GC,EAA4D,KAAtDH,SAASC,eAAe,oBAAoBC,MAAeF,SAASC,eAAe,oBAAoBC,MAAQ,OACzH,GAAW,SAARH,GAA0B,SAARI,EAArB,CAIA,IAAMrB,EAAa,CACfC,OAAO,MACPC,QAAS,CAAE,eAAgB,mBAC3B,8BAA8B,KAGlCC,MAAM,GAAD,OAAIxB,EAAJ,sBAAqBsC,EAArB,YAA4BI,IAAOjB,MAAK,SAACC,GAE1C,OADAU,QAAQC,IAAI,qBAAsBX,GAC3BA,EAASC,UACjBF,MAAK,SAACG,GAOL,OANAQ,QAAQC,IAAI,qBAAsBT,GAClC,EAAKC,UAAS,WACV,MAAO,CAACZ,UAAWa,MAAMC,KAAKC,KAAKC,MAAML,IACzCR,YAAY,MAGTI,MAAMxB,EAAI,QAASqB,MAC3BI,MAAK,SAACC,GAEL,OADAU,QAAQC,IAAI,gCAAiCX,GACtCA,EAASiB,UACjBlB,MAAK,SAACmB,GAELL,SAASC,eAAe,YAAYK,IAAM7C,EAAI,WAC/CkC,OAAM,SAACC,GACNC,QAAQC,IAAI,qCA3BZD,QAAQC,IAAI,wB,0CAiChBS,KAAKjB,UAAS,WACV,MAAO,CAACT,YAAY,MAGxBmB,SAASC,eAAe,YAAYK,IAAM7C,EAAI,W,+BAK9C,IAYI+C,EAZAC,EAAmBF,KAAK/B,MAAMI,cAAcd,KAAI,SAACO,EAAML,GAC3D,OAAO,4BAAQC,IAAKD,GACfK,MAIDqC,EAAuBH,KAAK/B,MAAMG,yBAAyBb,KAAI,SAACO,EAAML,GAC1E,OAAO,4BAAQC,IAAKD,GACfK,MAUL,OAJImC,GADyB,IAA1BD,KAAK/B,MAAMK,WACF0B,KAAK/B,MAAML,SAEXoC,KAAK/B,MAAME,UAGvB,oCACI,6BAASiC,UAAU,iBACf,2BAAOA,UAAU,YACjB,kBAACjD,EAAD,CAAaiD,UAAU,gBAAgBxC,SAAUqC,EACjD3C,UAAW0C,KAAK/B,MAAMC,gBAI1B,6BAASkC,UAAU,kBACf,4BAAQC,GAAG,eAAeD,UAAU,aAChC,4BAAQT,MAAM,IAAd,mBACEO,GAEN,4BAAQG,GAAG,mBAAmBD,UAAU,aACpC,4BAAQT,MAAM,IAAd,uBACEQ,GAEN,4BAAQC,UAAU,YAAYE,QAASN,KAAKO,YAAYC,KAAKR,OAA7D,oBACA,4BAAQI,UAAU,YAAYE,QAASN,KAAKS,kBAAkBD,KAAKR,OAAnE,eAGJ,6BAASI,UAAU,gBAAgBC,GAAG,iBAClC,yBAAKA,GAAG,WAAWN,IAAK7C,EAAI,SAAUwD,IAAI,wB,GAnIpCC,IAAMC,WCPRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACF1B,SAASC,eAAe,SD2HpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.08419c35.chunk.js","sourcesContent":["import React from 'react';\nlet url = 'https://species-sf5lnbi2xa-uc.a.run.app';\n\nfunction CreateTable(props){\n    let head_elements = props.my_header.map( (header, index)=>{\n        return <th key={index}>{ header }</th>\n    })\n\n    let row_elements = props.my_table.map((row, index)=>{\n        return <tr key={index}>{ row.map((item, i)=>{\n            return <td key={i}>{ item }</td>\n        })}</tr>\n    })\n    return <>\n    <thead><tr>{head_elements}</tr></thead>\n    <tbody>{row_elements}</tbody>\n    </>\n}\n\nclass Content extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {column_list : [], my_table:[], sub_table:null,\n        conservation_status_list:[], category_list:[], show_table:true}\n  }\n\n    componentDidMount(){\n        const reqOptions = {\n            method:'GET',\n            headers: { 'Content-Type': 'application/json'}\n        }\n\n        // fetch the columns of data table from api on component initial mount\n        fetch(url+'/get_column_names', reqOptions).then((response)=>{\n           \n            return response.json()\n        }).then((data) => {\n            this.setState((state)=>{\n                return {\n                    column_list: data[0], category_list: data[1],\n                    conservation_status_list: data[2]\n                }\n            });\n\n            return fetch(url+'/', reqOptions)\n        }).then((response)=>{\n            \n            return response.json()\n        }).then((data)=>{\n            // create the table from fetched table data\n            this.setState(()=>{\n                return {my_table: Array.from(JSON.parse(data))}\n            });        \n        })\n        .catch(err => {\n            console.log(' Encountered error requesting columns');\n        })\n\n    }\n\n    req_sublist(){\n\n        // values used as filters for table\n        let cat = document.getElementById('category_val').value !== '' ? document.getElementById('category_val').value : 'null';\n        let con = document.getElementById('conservation_val').value !== '' ? document.getElementById('conservation_val').value : 'null';\n        if(cat === 'null' && con === 'null'){\n            console.log(\" Empty parameters \");\n            return;\n        }\n        const reqOptions = {\n            method:'GET',\n            headers: { 'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin':''}\n        }\n        \n        fetch(`${url}/sub_table/${cat}/${con}`).then((response)=>{\n            console.log(\"sub list response \", response);\n            return response.json()\n        }).then((data)=>{\n            console.log(\"sub list response \", data);\n            this.setState(()=>{\n                return {sub_table: Array.from(JSON.parse(data)),\n                show_table: false}\n            });\n\n            return fetch(url+'/plot', reqOptions)\n        }).then((response)=>{\n            console.log('finished fetching image data ', response);\n            return response.blob()\n        }).then((image)=>{\n            // reset graph image\n            document.getElementById('curr_img').src = url+'/plot'; //URL.createObjectURL(image);\n        }).catch((err) => {\n            console.log(\"error retrieving sublist \" );\n        })\n\n    }\n\n    show_entire_table(){\n        this.setState(()=>{\n            return {show_table: true}\n\n        })\n        document.getElementById('curr_img').src = url+'/image';\n    }\n\n    render(){\n\n        let category_options = this.state.category_list.map((item, index)=>{\n        return <option key={index}>\n            {item}\n            </option>\n        });\n        \n        let conservation_options = this.state.conservation_status_list.map((item, index)=>{\n        return <option key={index}>\n            {item}\n            </option>\n        });\n        \n        let Table;\n        if(this.state.show_table === true)\n            Table = this.state.my_table;\n        else \n            Table = this.state.sub_table;\n\n        return (\n        <>\n            <section className=\"table_section\">\n                <table className=\"my_table\">\n                <CreateTable className='table_content' my_table={Table} \n                my_header={this.state.column_list} />\n                </table>\n            </section>\n\n            <section className=\"selection_menu\">\n                <select id='category_val' className='selection'>\n                    <option value=''>Select Category</option>\n                    { category_options }\n                </select>\n                <select id='conservation_val' className='selection'>\n                    <option value=''>Select Conservation</option>\n                    { conservation_options }\n                </select>\n                <button className='selection' onClick={this.req_sublist.bind(this)}> Set Parameters </button>\n                <button className='selection' onClick={this.show_entire_table.bind(this)}> Show All </button>\n            </section>\n\n            <section className='image_section' id='image_section'>\n                <img id='curr_img' src={url+'/image'} alt=\"initial image\" />\n\n            </section>\n        </>\n        );\n    }\n}\n\nexport default Content;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Content from './Content';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Content />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}